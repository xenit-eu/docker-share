plugins {
    id "eu.xenit.docker-alfresco" version "4.0.3" apply false
}

static def calcTags(version) {
    def tags = [
            "${version.major}.${version.minor}.${version.rev}".toString(),
            "${version.major}.${version.minor}".toString()
    ]

    if (version.label) {
        tags += "${version.major}.${version.minor}.${version.rev}.${version.label}".toString()
    }
    return tags
}

subprojects {
    apply plugin: 'java'

    if ("${project.projectDir}".toLowerCase().contains('skeleton')) {
        apply plugin: 'eu.xenit.docker'
    } else if ("${project.projectDir}".contains('enterprise') || "${project.projectDir}".contains('community')) {
        apply plugin: 'eu.xenit.docker-alfresco'
    }


    if (new File("${project.projectDir}/../overload.gradle").exists())
        apply from: "${project.projectDir}/../overload.gradle"
    if (new File("${project.projectDir}/overload.gradle").exists())
        apply from: "${project.projectDir}/overload.gradle"

    if ("${project.share.flavor}" == "skeleton") {
        def workingDir = "$project.buildDir/dockerbuild"

        task copyDockerfile(type: Copy) {
            from("$project.parent.projectDir/src/main/resources/dockerfiles/") {
                include "Dockerfile-skeleton"
                rename "Dockerfile-skeleton", 'Dockerfile'
            }
            into workingDir
        }
        task copyGlobalResources(type: Copy) {
            from "$project.parent.projectDir/src/main/resources/global"
            into workingDir
        }
        task copyLocalResources(type: Copy) {
            from "$project.projectDir/local"
            into workingDir
        }

        buildDockerImage.dependsOn(copyDockerfile)
        buildDockerImage.dependsOn(copyGlobalResources)
        buildDockerImage.dependsOn(copyLocalResources)

        dockerFile {
            dockerFile = file("$workingDir/Dockerfile")
            dockerBuild {
                if (!(project.hasProperty("repoName"))) {
                    ext.repoName = "hub.xenit.eu"
                }
                repository = "${repoName}" + "/alfresco-share-" + "${project.share.flavor}"
                tags = calcTags(project.share.version)
                automaticTags = false
            }
        }

        buildDockerImage {
            buildArgs = [
                    'SHARE_VERSION_MAJOR': "${project.share.version.major}",
                    'SHARE_VERSION_MINOR': "${project.share.version.minor}",
                    'SHARE_VERSION_REV'  : "${project.share.version.rev}",
                    'SHARE_FLAVOR'       : "${project.share.flavor}",
                    'BASE_IMAGE'            : "xeniteu/tomcat:alfresco-${project.share.version.major}.${project.share.version.minor}-ubuntu"
            ]

            if (project.hasProperty('extraBuildArgs'))
                buildArgs << project.extraBuildArgs

            doFirst {
                println buildArgs
            }
        }
        composeDown.enabled = false
    } else if ("${project.share.flavor}" == "enterprise" || ("${project.share.flavor}" == "community")) {

        def skeleton = ":${project.share.version.major}" + "." + "${project.share.version.minor}" + "/skeleton"
        def path = "${skeleton}:buildDockerImage"

        dockerAlfresco {
            baseImage = { project(skeleton).getTasks().getByName('buildDockerImage').getImageId() }
            dockerBuild {
                if (!(project.hasProperty("repoName"))) {
                    ext.repoName = "hub.xenit.eu"
                }
                repository = "${repoName}" + "/alfresco-share-" + "${project.share.flavor}"
                tags = calcTags(project.share.version)
            }
        }

        afterEvaluate {
            createDockerFile.dependsOn(path)
        }

        dockerCompose.dependsOn(buildDockerImage)

        docker {
            if(System.getenv("DOCKER_USER") != null) {
                registryCredentials {
                    username = System.getenv("DOCKER_USER")
                    password = System.getenv("DOCKER_PASSWORD")
                }
            } else {
                println "using default credentials"
            }
        }
    }
}

