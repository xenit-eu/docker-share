subprojects {
    apply plugin: 'eu.xenit.docker'

    if (new File("${project.projectDir}/overload.gradle").exists())
        apply from: "${project.projectDir}/overload.gradle"

    def workingDir = "$project.buildDir/dockerbuild"
    task copyDockerfile(type: Copy) {
        from("$rootProject.projectDir/src/main/resources/dockerfiles/") {
            include "Dockerfile-skeleton"
            rename "Dockerfile-skeleton", 'Dockerfile'
        }
        into workingDir
    }
    task copyGlobalResources(type: Copy) {
        from "$rootProject.projectDir/src/main/resources/global"
        into workingDir
    }
    task copyLocalResources(type: Copy) {
        from "$project.projectDir/local"
        into workingDir
    }

    buildDockerImage.dependsOn(copyDockerfile)
    buildDockerImage.dependsOn(copyGlobalResources)
    buildDockerImage.dependsOn(copyLocalResources)

    dockerFile {
        dockerFile = file("$workingDir/Dockerfile")
        dockerBuild {
            if (!(project.hasProperty("repoName"))) {
                ext.repoName = "hub.xenit.eu"
            }
            def namespace = (project.share.flavor == "enterprise" ? "alfresco-enterprise" : "public");
            repository = ((repoName == "hub.xenit.eu") ?
                    "${repoName}" + "/" + namespace + "/" + "alfresco-share-${project.share.flavor}" :
                    "${repoName}" + "/" + "alfresco-share-${project.share.flavor}")
            tags = calcTags(project.share.version)
        }
    }

    buildDockerImage {
        buildArgs = [
                'SHARE_VERSION_MAJOR': "${project.share.version.major}",
                'SHARE_VERSION_MINOR': "${project.share.version.minor}",
                'SHARE_VERSION_REV'  : "${project.share.version.rev}",
                'SHARE_FLAVOR'       : "${project.share.flavor}",
                'BASE_IMAGE'            : "docker.io/xenit/tomcat:alfresco-${project.share.version.major}.${project.share.version.minor}-ubuntu"
        ]

        if (project.hasProperty('extraBuildArgs'))
            buildArgs.putAll(project.extraBuildArgs)

        doFirst {
            println buildArgs
        }
    }

    docker {
        if(System.getenv("DOCKER_USER") != null) {
            registryCredentials {
                username = System.getenv("DOCKER_USER")
                password = System.getenv("DOCKER_PASSWORD")
            }
        }
    }
}
